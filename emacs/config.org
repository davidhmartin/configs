#+AUTHOR: David H Martin
#+TITLE:  David Martin's emacs configuration
#+OPTIONS: num:nil
* Overview
  GNU Emacs configuration implemented in "literate programming" style using org/babel  
** Usage
   Copy or symlink this file (config.org) to $HOME/.emacs.d. Edit init.el to contain only the following:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "config.org"
                   user-emacs-directory))
#+END_SRC

** Conventions:
  - Use straight for package management
  - use config.org for all configuration
  - Don't use customize

* Setting up package management and load paths
** Disable package.el
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap straight as the package manager
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** Add .emacs.d/lisp to load path, for unpackaged sources
#+BEGIN_SRC emacs-lisp
(setq load-path (cons (expand-file-name "~/.emacs.d/lisp") load-path))
#+END_SRC

* Fix the os/x shell path issue
 #+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize))))
#+END_SRC

* Head off potential memory issues caused by LSP
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
(when (boundp 'read-process-output-max)
  ;; New in Emacs 27
  (setq read-process-output-max (* 1024 1024)))
#+END_SRC

* file stuff
#+BEGIN_SRC emacs-lisp
;(straight-use-package 'f)
;(require 'f-shortdoc)
;(require 'f)
#+END_SRC


* Shell support: vterm
  See https://github.com/akermu/emacs-libvterm
  To run on OS/X, need to install libvterm and cmake via homebrew, as follows:
    brew install libvterm
    brew install cmake
#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC


* Hydra
#+BEGIN_SRC emacs-lisp
(use-package general)
(use-package hydra)
#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp
  ;; (use-package vertico
  ;;   :ensure
  ;;   :bind (:map vertico-map
  ;;               ("C-j" . vertico-next)
  ;;               ("C-k" . vertico-previous)
  ;;               ("C-f" . vertico-exit)
  ;;               :map minibuffer-local-map
  ;;               ("M-h" . backward-kill-word))
  ;;   :init
  ;;   (vertico-mode))

  (use-package vertico
    :custom
    (vertico-count 13)                    ; Number of candidates to display
    (vertico-resize t)
    (vertico-cycle nil) ; Go from last to first candidate and first to last (cycle)?
    :config
    (vertico-mode))
#+END_SRC

* Orderless completion
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

* Marginalia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
#+END_SRC

* Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '(("~/git" . 1))))
#+END_SRC

* Tree pane support
** Neotree
Neotree has been working well for me, and I like the simplicity of its configuration.
Might experiment with treemacs in the future. 

#+BEGIN_SRC emacs-lisp

(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

(use-package neotree
  :config
    ;;(global-set-key [f8] 'neotree-toggle)
    (setq neo-window-fixed-size nil)
    (setq neo-smart-open t)
    (setq neo-theme 'nerd)
    (setq neo-window-width 35)
    (setq projectile-switch-project-action 'neotree-projectile-action)

    (defhydra hydra-neotree (global-map "<f8>")
      "neotree"
      ("t" neotree-toggle "toggle")
      ("p" neotree-project-dir "open project root")
      ("f" neotree-find "find")
      ("d" neotree-dir "dir")))
#+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC


* General editor settings
** Basic settings
 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode 1)
   (column-number-mode 1)
   (global-hl-line-mode 1)
   (global-visual-line-mode nil)
   ;(global-whitespace-mode 1)
   (show-paren-mode 1)
   (setq-default indent-tabs-mode nil)
#+END_SRC
** Persist minibuffer history
#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC

* TO-do file customizations
** Customize the to-do workflow states.
   I distinguish between activites ("TODO") and meetings ("MEETING")
#+BEGIN_SRC emacs-lisp
(setq-default org-todo-keywords
              '((sequence "TODO" "IN-PROGRESS" "|" "DONE" "DEFERRED" "CANCELED")
                (sequence "MEETING" "|" "MTG DONE" "MTG CANCELED")))

#+END_SRC
** Function to open todo file for the current day.
   This hard-codes my (rather primitive) convention: file name is the date, all files are in $HOME/todo.
#+BEGIN_SRC emacs-lisp
(defun open-today-todo-file ()
  "Opens today's org mode todo file. Hard-coned assumptions: todo files are in '$HOME/todo' and follow the pattern 'mmmdd.org', e.g. 'nov07.org'"
  (interactive)
  (let ((today (downcase (format-time-string "%b%d.org"))))
    (switch-to-buffer (find-file-noselect (concat "~/todo/" today)))
    (when (eq 0 (buffer-size))
      (insert "Todo list for " (format-time-string "<%Y-%m-%d %a>\n"))
      (insert "* Work\n")
      (insert "** TODO Email/Slack/Tabs\n")
      (insert "** MEETING Standup\n"))))
#+END_SRC


** Org babel helpers (Primarily for editing this config.org file)
  Add a keyboard macro named "elisp" to insert #+BEGIN_SRC and #+END_SRC.
  I'm using a macro instead of snippets because YASnippets does not play well with org mode and it's not worth the effort to fix unless I get heavily into org mode editing.
#+BEGIN_SRC emacs-lisp
(fset 'elisp-src
   (kmacro-lambda-form [?\C-a ?# ?+ ?B ?E ?G ?I ?N ?_ ?S ?R ?C ?  ?e ?m ?a ?c ?s ?- ?l ?/ ?i ?s ?p backspace backspace backspace backspace ?i ?s ?p return return ?# ?+ ?E ?N ?D ?_ ?S ?R ?C up] 0 "%d"))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :custom (markdown-command "/usr/local/bin/markdown"))
  (use-package markdown-preview-mode)
#+END_SRC        
  
* Snippets
  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC


* Git support 
 #+BEGIN_SRC emacs-lisp
   (use-package magit)
#+END_SRC


* Programming language support

** LSP
Language Server Protocol support.

*** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init (setq lsp-keymap-prefix "s-l")
  :commands (lsp lsp-deferred)
  :bind (:map lsp-mode-map ("C-c C-a" . #'lsp-execute-code-action))
  :custom
  (lsp-file-watch-threshold nil)
  (lsp-solargraph-multi-root nil)
  :config
  ;;;(lsp-enable-which-key-integration t)
  :hook ((go-mode . lsp)
         (typescript-mode . lsp)
         (ruby-mode . lsp)))

(use-package lsp-ui
  :commands lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-prefer-flymake nil)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-alignment 'window))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(use-package company-lsp :commands company-lsp)

(setq
 lsp-ui-doc-enable t
 lsp-ui-peek-enable t
 lsp-ui-sideline-enable t
 lsp-ui-imenu-enable t
 lsp-ui-flycheck-enable t)
#+END_SRC

**** lsp-mode custom keymap
#+BEGIN_SRC emacs-lisp 
(define-prefix-command 'my-lsp-map)
(global-set-key (kbd "<f9>") 'my-lsp-map)
(define-key my-lsp-map (kbd ".") #'xref-find-definitions)
(define-key my-lsp-map (kbd ",") #'xref-go-back)
(define-key my-lsp-map (kbd "/") #'xref-find-references)
(define-key my-lsp-map (kbd "<tab>") #'company-complete)
(define-key my-lsp-map (kbd "<down>") #'flymake-goto-next-error)
(define-key my-lsp-map (kbd "<up>") #'flymake-goto-prev-error)

(define-key my-lsp-map (kbd "b") #'dap-breakpoint-toggle)
(define-key my-lsp-map (kbd "r") #'dap-restart)
(define-key my-lsp-map (kbd "l") #'dap-debug-last)
(define-key my-lsp-map (kbd "d") #'dap-debug)
(define-key my-lsp-map (kbd "h") '(dap-hydra t :wk "debugger"))
#+END_SRC


*** eglot

Debugging golang only works well with lsp-mode. :-(

#+BEGIN_SRC emacs-lisp :tangle no

;; Install eglot-format-buffer as a save hook.
;; The depth of -10 places this before eglot's willSave notification,
;; so that that notification reports the actual contents that will be saved.
  ;; From: https://go.googlesource.; commentm/tools/+/refs/heads/master/gopls/doc/emacs.md
(defun eglot-format-buffer-on-save ()
  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

(use-package eglot)
#+END_SRC

**** eglot custom keymap
Eglot uses the std xref commands which are bound to *M-.*, *M-?*, and *M-,* for "find defn", "find references", and "go back"
but it doesn't define shortcuts for related commands.
I'm using F9 prefix, mapping the above to the same keys w/ the meta prefix, plus letter mnemonics for
the other find function plus rename and "code actions".

#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'eglot-map)
(global-set-key (kbd "<f9>") 'eglot-map)
(define-key eglot-map (kbd ".") #'xref-find-definitions)
(define-key eglot-map (kbd ",") #'xref-go-back)
(define-key eglot-map (kbd "/") #'xref-find-references)
(define-key eglot-map (kbd "d") #'eglot-find-declaration)
(define-key eglot-map (kbd "i") #'eglot-find-implementation)
(define-key eglot-map (kbd "t") #'eglot-find-typeDefinition)
(define-key eglot-map (kbd "r") #'eglot-rename)
(define-key eglot-map (kbd "a") #'eglot-code-actions)
(define-key eglot-map (kbd "<tab>") #'company-complete)
(define-key eglot-map (kbd "<down>") #'flymake-goto-next-error)
(define-key eglot-map (kbd "<up>") #'flymake-goto-prev-error)
#+END_SRC

** DAP
Debugging

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :commands dap-debug

    :config
    (require 'dap-ui)
    (dap-mode 1)
    (setq dap-print-io t)

    (dap-auto-configure-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (dap-ui-controls-mode 1)

    (require 'dap-hydra)

    (require 'dap-node)
    (dap-node-setup) ;; automatically installs Node debug adapter if needed

    (require 'dap-dlv-go)

    (require 'dap-gdb-lldb)
    (dap-gdb-lldb-setup)

    (dap-ui-mode 1)
    ;; (use-package dap-ui
    ;;  :ensure nil
    ;;  :config
    ;;  (dap-ui-mode 1))

  ;; bind C-c l d to dap-hydra for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))
#+END_SRC
   
** Various file edit modes
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
(use-package json-mode)
(use-package graphql-mode
  :mode ("\\.graphqls\\'"
         "\\.graphql\\'"
         "\\.gql\\'")
  :config
  (setq graphql-indent-level 4))
#+END_SRC

** High octane completion
   Enables ivy mode, counsel, and swiper. (See https://github.com/abo-abo/swiper and https://oremacs.com/swiper/)
#+BEGIN_SRC emacs-lisp

(use-package ivy
  :bind (("<C-return>" . ivy-immediate-done)))

(use-package counsel :config (counsel-mode 1))

(use-package swiper
  :bind* (("C-s" . swiper)
          ("C-M-s" . swiper-all))
  :bind
  (:map read-expression-map
        ("C-r" . counsel-minibuffer-history)))

(use-package flycheck
  :config (global-flycheck-mode 1))

;;(straight-use-package 'company-mode)
(use-package company
  :config
  (global-company-mode))

(define-key isearch-mode-map (kbd "C-c s") 'swiper-isearch-toggle)
(define-key swiper-map (kbd "C-c s") 'swiper-isearch-toggle)

(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))

#+END_SRC

** popwin
Makes the compilation buffer show in a consistent place
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :config
  (popwin-mode 1)
  (push '(compilation-mode :position top :noselect 1 :stick 1) popwin:special-display-config))
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :hook ((ruby-mode . robe-mode)))

  ;; (use-package ruby-mode
  ;;   :after lsp-mode
  ;;   :hook ((ruby-mode . lsp-deferred)))
  (use-package inf-ruby
    :config
    (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
#+END_SRC

Loading ruby-debug was disabled in my original init.el. I don't remember why. If you start doing ruby dev, try re-enabling this.
#+BEGIN_SRC emacs-lisp :tangle no
       (require 'ruby-debug)
#+END_SRC

** Javascript / Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC

** Java
I'm happy not to be doing java anymore. As a long-term IntelliJ IDEA user, it's an open question (for me) whether lsp is a viable alternative.
If I'm lucky I won't have to find out; a quarter century is too long to use the same programming language.

** Go
   Inspirations:
   - https://dr-knz.net/a-tour-of-emacs-as-go-editor.html
   - https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

#+BEGIN_SRC emacs-lisp

  (use-package go-mode
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (setq indent-tabs-mode 1)
                              (setq tab-width 4)
                              ;; (eglot-ensure)
                              ;; (eglot-format-buffer-on-save)
                              (setq lsp-go-env '((GOFLAGS . "-tags=e2e")))
                              ))
      (setq-default eglot-workspace-configuration
        '((:gopls .
            ((staticcheck . t)
             (matcher . "CaseSensitive")))))

      (defvar gofmt-command '/usr/local/bin/gofmt)

      ;; :hook ((go-mode . lsp-deferred)
      ;;        (before-save . lsp-format-buffer)
      ;;        (before-save . lsp-organize-imports)))
      )
#+END_SRC

*** Glyphs
    Defines ligatures for go mode.
    Currently prettify-symbols-mode is disabled by default; I define the shortcut "F12-p" to turn it on for current buffer.
    If/when I do start using this, will probably narrow it down to a subset.
#+BEGIN_SRC emacs-lisp
   (add-hook
    'go-mode-hook
    (lambda ()
      (push '("error" . ?∇) prettify-symbols-alist)
      (push '("err" . ?⊙) prettify-symbols-alist)
      (push '("exists" . ?∃) prettify-symbols-alist)
      (push '(":= range" . ?∈) prettify-symbols-alist)
      (push '("ok" . ?✓) prettify-symbols-alist)
      (push '("==" . ?≡) prettify-symbols-alist)
      (push '(":=" . ?≔) prettify-symbols-alist)
      (push '(">=" . ?≥) prettify-symbols-alist)
      (push '("<=" . ?≤) prettify-symbols-alist)
      (push '("<-" . ?←) prettify-symbols-alist)
      (push '("!=" . ?≠) prettify-symbols-alist)
      (push '("..." . ?…) prettify-symbols-alist)
      (push '("nil" . ?∅) prettify-symbols-alist)
      (push '("make" . ?&) prettify-symbols-alist)
      (push '("new" . ?&) prettify-symbols-alist)
      (push '("context.Context" . ?◇) prettify-symbols-alist)
      (push '("ctx" . ?⋄) prettify-symbols-alist)
      (push '("mu" . ?❢) prettify-symbols-alist)
      (push '("&&" . ?∧) prettify-symbols-alist)
      (push '("||" . ?∨) prettify-symbols-alist)
      (push '("!" . ?¬) prettify-symbols-alist)
      (push '("interface{}" . ?⋆) prettify-symbols-alist)
      (push '("struct{}" . ?ε) prettify-symbols-alist)
      ))
#+END_SRC

* Custom keyboard shortcuts
  Using F12 as the prefix for personal shortcuts.
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'david-map)
(global-set-key (kbd "<f12>") 'david-map)
(define-key david-map (kbd "l") #'counsel-load-theme)
(define-key david-map (kbd "c") (lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))) ; open buffer on this file
(define-key david-map (kbd "t") #'open-today-todo-file)
(define-key david-map (kbd "n") #'display-line-numbers-mode)
(define-key david-map (kbd "e") #'elisp-src) ; inserts begin_src emacs-lisp and end_src emacs-lisp region
(define-key david-map (kbd "E") #'emacs-lisp-mode)
(define-key david-map (kbd "f") #'neotree-find)
(define-key david-map (kbd "p") #'prettify-symbols-mode) ; toggle ligatures

;; window navigation
(define-key david-map (kbd "<up>") #'windmove-up)
(define-key david-map (kbd "<down>") #'windmove-down)
(define-key david-map (kbd "<left>") #'windmove-left)
(define-key david-map (kbd "<right>") #'windmove-right)
#+END_SRC

* Window navigation

** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window))
#+END_SRC 

* Fonts

** Setting the default face (disabled)
Just keeping this here for reference, but not needing it right now
#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'default nil
                    :family "Menlo"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Ligatures (prettify-symbols-mode)
Setting this off by default, at least for now. 
Note that the custom shortcut "F12-p" toggles ligatures for the buffer.
#+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode -1)
#+END_SRC


* Themes
To find new themes, see https://emacsthemes.com.
(Note: I like to set the color theme last because it makes it easy to tell when emacs initialization has successfully completed.)

** Load my favorite themes
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config (load-theme 'nord t))
(use-package zenburn-theme)
#+END_SRC 

** Persist theme selection across sessions
#+BEGIN_SRC emacs-lisp
(use-package remember-last-theme
  :config (remember-last-theme-with-file-enable (expand-file-name "transient/last-theme" user-emacs-directory)))
#+END_SRC 

