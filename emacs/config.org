#+AUTHOR: David H Martin
#+TITLE:  David Martin's emacs configuration
#+OPTIONS: num:nil
* Overview
  GNU Emacs configuration implemented in "literate programming" style using org/babel  
** Usage
   Copy or symlink this file (config.org) to $HOME/.emacs.d. Edit init.el to contain only the following:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "config.org"
                   user-emacs-directory))
#+END_SRC

** Conventions:
  - Use straight for package management
  - use config.org for all configuration
  - Don't use customize

* Setting up package management and load paths
** Disable package.el
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap straight as the package manager
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** Add .emacs.d/lisp to load path, for unpackaged sources
#+BEGIN_SRC emacs-lisp
(setq load-path (cons (expand-file-name "~/.emacs.d/lisp") load-path))
#+END_SRC

* Fix the os/x shell path issue
 #+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize))))
#+END_SRC

* Head off potential memory issues caused by LSP
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
(when (boundp 'read-process-output-max)
  ;; New in Emacs 27
  (setq read-process-output-max (* 1024 1024)))
#+END_SRC


* Shell support: vterm
  See https://github.com/akermu/emacs-libvterm
  To run on OS/X, need to install libvterm and cmake via homebrew, as follows:
    brew install libvterm
    brew install cmake
#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC


* Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :custom
    (vertico-count 13)                    ; Number of candidates to display
    (vertico-resize t)
    (vertico-cycle nil) ; Go from last to first candidate and first to last (cycle)?
    :config
    (vertico-mode))
#+END_SRC

* Orderless completion
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

;; (use-package orderless
;;   :ensure t
;;   :custom
;;   (completion-styles '(orderless basic))
;;   (completion-category-overrides '((file (styles basic partial-completion)))))

  #+END_SRC

* Marginalia
#+BEGIN_SRC emacs-lisp
  ;; (use-package all-the-icons
  ;;   :if (display-graphic-p)
  ;;   :commands all-the-icons-install-fonts
  ;;   :config (unless (find-font (font-spec :name "all-the-icons"))
  ;;             (all-the-icons-install-fonts t)))


  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  ;; (use-package all-the-icons-completion
  ;;   :after (marginalia all-the-icons)
  ;;   :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

#+END_SRC

* Consult

#+BEGIN_SRC emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+END_SRC

* Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
(use-package general)
(use-package hydra)
(use-package major-mode-hydra
  :after (hydra all-the-icons)
  :preface
  (defun with-alltheicon (icon str &optional height v-adjust face)
    "Display an icon from all-the-icon."
    (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))
  
  ;; (defun with-faicon (icon str &optional height v-adjust face)
  ;;   "Display an icon from Font Awesome icon."
  ;;   (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))
  
  (defun with-fileicon (icon str &optional height v-adjust face)
    "Display an icon from the Atom File Icons package."
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))
  
  (defun with-octicon (icon str &optional height v-adjust face)
    "Display an icon from the GitHub Octicons."
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  

(use-package projectile
  :ensure t
  :after hydra
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)
              ("<f7>" . hydra-projectile/body))
  :config
  (setq projectile-project-search-path '(("~/git" . 1)))
  (pretty-hydra-define hydra-projectile
    ;(:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    (:hint nil :color teal :quit-key "q" :title "Projectile")
    ("Buffers"
     (("b" projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" projectile-find-file "file")
      ("p" consult-projectile "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("g" consult-git-grep "search")
      ("s" consult-line "search this buffer")
      ("a" consult-line-multi "search all buffers")))))
#+END_SRC


* Tree pane support
** Neotree
Neotree has been working well for me, and I like the simplicity of its configuration.
Might experiment with treemacs in the future. 

#+BEGIN_SRC emacs-lisp :tangle no

(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

(use-package neotree
  :config
    ;;(global-set-key [f8] 'neotree-toggle)
    (setq neo-window-fixed-size nil)
    (setq neo-smart-open t)
    (setq neo-theme 'nerd)
    (setq neo-window-width 35)
    (setq projectile-switch-project-action 'neotree-projectile-action)

    (defhydra hydra-neotree (global-map "<f8>")
      "neotree"
      ("t" neotree-toggle "toggle")
      ("p" neotree-project-dir "open project root")
      ("f" neotree-find "find")
      ("d" neotree-dir "dir")))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :bind
  (("<f8>" . treemacs-common-helpful-hydra)
   ("S-<f8>" . treemacs)
   ("C-S-<f8>" . treemacs-advanced-helpful-hydra))
  :init
  ;; todo bind a key to 'treemacs-select-window
  :config
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)
  
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  ;; (when treemacs-python-executable
  ;;   (treemacs-git-commit-diff-mode t))
  
  ;; (pcase (cons (not (null (executable-find "git")))
  ;;              (not (null treemacs-python-executable)))
  ;;   (`(t . t)
  ;;    (treemacs-git-mode 'deferred))
  ;;   (`(t . _)
  ;;    (treemacs-git-mode 'simple)))
  
  (treemacs-hide-gitignored-files-mode nil)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

;; (use-package treemacs-icons-dired
;;   :hook (dired-mode . treemacs-icons-dired-enable-once)
;;   :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
;;   :ensure t
;;   :config (treemacs-set-scope-type 'Perspectives))

;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
;;   :after (treemacs)
;;   :ensure t
;;   :config (treemacs-set-scope-type 'Tabs))

#+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC


* General editor settings
** Basic settings
 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode 1)
   (column-number-mode 1)
   (global-hl-line-mode 1)
   (global-visual-line-mode nil)
   ;(global-whitespace-mode 1)
   (show-paren-mode 1)
   (setq-default indent-tabs-mode nil)
#+END_SRC
** Persist minibuffer history
#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC

* TO-do file customizations
** Customize the to-do workflow states.
   I distinguish between activites ("TODO") and meetings ("MEETING")
#+BEGIN_SRC emacs-lisp
(setq-default org-todo-keywords
              '((sequence "TODO" "IN-PROGRESS" "|" "DONE" "DEFERRED" "CANCELED")
                (sequence "MEETING" "|" "MTG DONE" "MTG CANCELED")))

#+END_SRC
** Function to open todo file for the current day.
   This hard-codes my (rather primitive) convention: file name is the date, all files are in $HOME/todo.
#+BEGIN_SRC emacs-lisp
(defun open-today-todo-file ()
  "Opens today's org mode todo file. Hard-coned assumptions: todo files are in '$HOME/todo' and follow the pattern 'mmmdd.org', e.g. 'nov07.org'"
  (interactive)
  (let ((today (downcase (format-time-string "%b%d.org"))))
    (switch-to-buffer (find-file-noselect (concat "~/todo/" today)))
    (when (eq 0 (buffer-size))
      (insert "Todo list for " (format-time-string "<%Y-%m-%d %a>\n"))
      (insert "* Work\n")
      (insert "** TODO Email/Slack/Tabs\n")
      (insert "** MEETING Standup\n"))))
#+END_SRC


** Org babel helpers (Primarily for editing this config.org file)
  Add a keyboard macro named "elisp" to insert #+BEGIN_SRC and #+END_SRC.
  I'm using a macro instead of snippets because YASnippets does not play well with org mode and it's not worth the effort to fix unless I get heavily into org mode editing.
#+BEGIN_SRC emacs-lisp
(fset 'elisp-src
   (kmacro-lambda-form [?\C-a ?# ?+ ?B ?E ?G ?I ?N ?_ ?S ?R ?C ?  ?e ?m ?a ?c ?s ?- ?l ?/ ?i ?s ?p backspace backspace backspace backspace ?i ?s ?p return return ?# ?+ ?E ?N ?D ?_ ?S ?R ?C up] 0 "%d"))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :custom (markdown-command "/usr/local/bin/markdown"))
  (use-package markdown-preview-mode)
#+END_SRC        
  
* Snippets
  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC


* Git support 
 #+BEGIN_SRC emacs-lisp
   (use-package magit)
#+END_SRC


* Programming language support

** LSP
Language Server Protocol support.

*** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init (setq lsp-keymap-prefix "s-l")
  :commands (lsp lsp-deferred)
  :bind (:map lsp-mode-map ("C-c C-a" . #'lsp-execute-code-action))
  :custom
  (lsp-file-watch-threshold nil)
  (lsp-solargraph-multi-root nil)
  :config
  ;;;(lsp-enable-which-key-integration t)
  :hook ((go-mode . lsp)
         (typescript-mode . lsp)
         (ruby-mode . lsp)))

(use-package lsp-ui
  :commands lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-prefer-flymake nil)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-alignment 'window))

;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;(use-package company-lsp :commands company-lsp)

(setq
 lsp-ui-doc-enable t
 lsp-ui-peek-enable t
 lsp-ui-sideline-enable t
 lsp-ui-imenu-enable t
 lsp-ui-flycheck-enable t)
#+END_SRC

**** lsp-mode custom keymap
#+BEGIN_SRC emacs-lisp 
(define-prefix-command 'my-lsp-map)
(global-set-key (kbd "<f9>") 'my-lsp-map)
(define-key my-lsp-map (kbd ".") #'xref-find-definitions)
(define-key my-lsp-map (kbd ",") #'xref-go-back)
(define-key my-lsp-map (kbd "/") #'xref-find-references)
(define-key my-lsp-map (kbd "<tab>") #'company-complete)
(define-key my-lsp-map (kbd "<down>") #'flymake-goto-next-error)
(define-key my-lsp-map (kbd "<up>") #'flymake-goto-prev-error)

(define-key my-lsp-map (kbd "b") #'dap-breakpoint-toggle)
(define-key my-lsp-map (kbd "r") #'dap-restart)
(define-key my-lsp-map (kbd "l") #'dap-debug-last)
(define-key my-lsp-map (kbd "d") #'dap-debug)
(define-key my-lsp-map (kbd "h") '(dap-hydra t :wk "debugger"))
#+END_SRC


*** eglot

Debugging golang only works well with lsp-mode. :-(

#+BEGIN_SRC emacs-lisp :tangle no

;; Install eglot-format-buffer as a save hook.
;; The depth of -10 places this before eglot's willSave notification,
;; so that that notification reports the actual contents that will be saved.
  ;; From: https://go.googlesource.; commentm/tools/+/refs/heads/master/gopls/doc/emacs.md
(defun eglot-format-buffer-on-save ()
  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

(use-package eglot)
#+END_SRC

**** eglot custom keymap
Eglot uses the std xref commands which are bound to *M-.*, *M-?*, and *M-,* for "find defn", "find references", and "go back"
but it doesn't define shortcuts for related commands.
I'm using F9 prefix, mapping the above to the same keys w/ the meta prefix, plus letter mnemonics for
the other find function plus rename and "code actions".

#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'eglot-map)
(global-set-key (kbd "<f9>") 'eglot-map)
(define-key eglot-map (kbd ".") #'xref-find-definitions)
(define-key eglot-map (kbd ",") #'xref-go-back)
(define-key eglot-map (kbd "/") #'xref-find-references)
(define-key eglot-map (kbd "d") #'eglot-find-declaration)
(define-key eglot-map (kbd "i") #'eglot-find-implementation)
(define-key eglot-map (kbd "t") #'eglot-find-typeDefinition)
(define-key eglot-map (kbd "r") #'eglot-rename)
(define-key eglot-map (kbd "a") #'eglot-code-actions)
(define-key eglot-map (kbd "<tab>") #'company-complete)
(define-key eglot-map (kbd "<down>") #'flymake-goto-next-error)
(define-key eglot-map (kbd "<up>") #'flymake-goto-prev-error)
#+END_SRC

** DAP
Debugging

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :commands dap-debug

    :config
    (require 'dap-ui)
    (dap-mode 1)
    (setq dap-print-io t)

    (dap-auto-configure-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (dap-ui-controls-mode 1)

    (require 'dap-hydra)

    (require 'dap-node)
    (dap-node-setup) ;; automatically installs Node debug adapter if needed

    (require 'dap-dlv-go)

    (require 'dap-gdb-lldb)
    (dap-gdb-lldb-setup)

    (dap-ui-mode 1)
    ;; (use-package dap-ui
    ;;  :ensure nil
    ;;  :config
    ;;  (dap-ui-mode 1))

  ;; bind C-c l d to dap-hydra for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))
#+END_SRC
   
** Various file edit modes
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
(use-package json-mode)
(use-package graphql-mode
  :mode ("\\.graphqls\\'"
         "\\.graphql\\'"
         "\\.gql\\'")
  :config
  (setq graphql-indent-level 4))
#+END_SRC

** High octane completion
   Enables ivy mode, counsel, and swiper. (See https://github.com/abo-abo/swiper and https://oremacs.com/swiper/)
#+BEGIN_SRC emacs-lisp :tangle no

(use-package ivy
  :bind (("<C-return>" . ivy-immediate-done)))

(use-package counsel :config (counsel-mode 1))

(use-package swiper
  :bind* (("C-s" . swiper)
          ("C-M-s" . swiper-all))
  :bind
  (:map read-expression-map
        ("C-r" . counsel-minibuffer-history)))

;;(straight-use-package 'company-mode)
(use-package company
  :config
  (global-company-mode))

(define-key isearch-mode-map (kbd "C-c s") 'swiper-isearch-toggle)
(define-key swiper-map (kbd "C-c s") 'swiper-isearch-toggle)

(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config (global-flycheck-mode 1))
#+END_SRC

** popwin
Makes the compilation buffer show in a consistent place
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :config
  (popwin-mode 1)
  (push '(compilation-mode :position top :noselect 1 :stick 1) popwin:special-display-config))
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :hook ((ruby-mode . robe-mode)))

  ;; (use-package ruby-mode
  ;;   :after lsp-mode
  ;;   :hook ((ruby-mode . lsp-deferred)))
  (use-package inf-ruby
    :config
    (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
#+END_SRC

Loading ruby-debug was disabled in my original init.el. I don't remember why. If you start doing ruby dev, try re-enabling this.
#+BEGIN_SRC emacs-lisp :tangle no
       (require 'ruby-debug)
#+END_SRC

** Javascript / Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC

** Java
Open question: how does java lsp compare to the most excellent Intellij IDEA?
I'll find out the next time I have to do a lot of java work; in the meantime,
I'm deferring adding java support until needed.

** Go
   Inspirations:
   - https://dr-knz.net/a-tour-of-emacs-as-go-editor.html
   - https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

#+BEGIN_SRC emacs-lisp

  (use-package go-mode
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (setq indent-tabs-mode 1)
                              (setq tab-width 4)
                              ;; (eglot-ensure)
                              ;; (eglot-format-buffer-on-save)
                              (setq lsp-go-env '((GOFLAGS . "-tags=e2e")))
                              ))
      (setq-default eglot-workspace-configuration
        '((:gopls .
            ((staticcheck . t)
             (matcher . "CaseSensitive")))))

      (defvar gofmt-command '/usr/local/bin/gofmt)

      ;; :hook ((go-mode . lsp-deferred)
      ;;        (before-save . lsp-format-buffer)
      ;;        (before-save . lsp-organize-imports)))
      )
#+END_SRC

*** Glyphs
    Defines ligatures for go mode.
    Currently prettify-symbols-mode is disabled by default; I define the shortcut "F12-p" to turn it on for current buffer.
    If/when I do start using this, will probably narrow it down to a subset.
#+BEGIN_SRC emacs-lisp
   (add-hook
    'go-mode-hook
    (lambda ()
      (push '("error" . ?∇) prettify-symbols-alist)
      (push '("err" . ?⊙) prettify-symbols-alist)
      (push '("exists" . ?∃) prettify-symbols-alist)
      (push '(":= range" . ?∈) prettify-symbols-alist)
      (push '("ok" . ?✓) prettify-symbols-alist)
      (push '("==" . ?≡) prettify-symbols-alist)
      (push '(":=" . ?≔) prettify-symbols-alist)
      (push '(">=" . ?≥) prettify-symbols-alist)
      (push '("<=" . ?≤) prettify-symbols-alist)
      (push '("<-" . ?←) prettify-symbols-alist)
      (push '("!=" . ?≠) prettify-symbols-alist)
      (push '("..." . ?…) prettify-symbols-alist)
      (push '("nil" . ?∅) prettify-symbols-alist)
      (push '("make" . ?&) prettify-symbols-alist)
      (push '("new" . ?&) prettify-symbols-alist)
      (push '("context.Context" . ?◇) prettify-symbols-alist)
      (push '("ctx" . ?⋄) prettify-symbols-alist)
      (push '("mu" . ?❢) prettify-symbols-alist)
      (push '("&&" . ?∧) prettify-symbols-alist)
      (push '("||" . ?∨) prettify-symbols-alist)
      (push '("!" . ?¬) prettify-symbols-alist)
      (push '("interface{}" . ?⋆) prettify-symbols-alist)
      (push '("struct{}" . ?ε) prettify-symbols-alist)
      ))
#+END_SRC

* Custom keyboard shortcuts
  Using F12 as the prefix for personal shortcuts.
#+BEGIN_SRC emacs-lisp
  (defun open-emacs-config ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
  
  (pretty-hydra-define david-hydra
    (:hint nil :color teal :quit-key "q" :title "General things")
    ("Editing config.org"
     (("c" open-emacs-config "Emacs config")
      ("E" elisp-src "Elisp source  block")
      ("e" emacs-lisp-mode "Emacs lisp mode"))
     "TODO"
     (("t" open-today-todo-file))
     "Visual"
     (("n" display-line-numbers-mode "Toggle line numbers")
      ("p" prettify-symbols-mode "Toggle ligatures")
      ("l" load-theme))
     "windows"
     (("<up>" windmove-up "Up window")
      ("<down>" windmove-down "Down window")
      ("<left>" windmove-left "Left window")
      ("<right>" windmove-right "Right window")
      ("1" delete-other-windows "delete other windows")
      ("0" delete-window "delete this window")
      ("2" split-window-below "split --")
      ("3" split-window-right "split |"))
     "Search"
     (("s" consult-line "search this buffer")
      ("S" consult-line-multi "search all buffers")
      ("f" consult-focus-lines))))

  (global-set-key (kbd "<f12>") 'david-hydra/body)


  ;; (define-prefix-command 'david-map)
  ;; (global-set-key (kbd "<f12>") 'david-map)
  ;; (define-key david-map (kbd "l") #'load-theme)
  ;; (define-key david-map (kbd "c") (lambda () ((interactive ";")) (find-file (expand-file-name "config.org" user-emacs-directory)))) ; open buffer on this file
  ;; (define-key david-map (kbd "t") #'open-today-todo-file)
  ;; (define-key david-map (kbd "n") #'display-line-numbers-mode)
  ;; (define-key david-map (kbd "e") #'elisp-src) ; inserts begin_src emacs-lisp and end_src emacs-lisp region
  ;; (define-key david-map (kbd "E") #'emacs-lisp-mode)
  ;; (define-key david-map (kbd "f") #'neotree-find)
  ;; (define-key david-map (kbd "p") #'prettify-symbols-mode) ; toggle ligatures

  ;; ;; window navigation
  ;; (define-key david-map (kbd "<up>") #'windmove-up)
  ;; (define-key david-map (kbd "<down>") #'windmove-down)
  ;; (define-key david-map (kbd "<left>") #'windmove-left)
  ;; (define-key david-map (kbd "<right>") #'windmove-right)
#+END_SRC

* Window navigation

** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window))
#+END_SRC 

* Fonts

** Setting the default face (disabled)
Just keeping this here for reference, but not needing it right now
#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'default nil
                    :family "Menlo"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Ligatures (prettify-symbols-mode)
Setting this off by default, at least for now. 
Note that the custom shortcut "F12-p" toggles ligatures for the buffer.
#+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode -1)
#+END_SRC


* Themes
To find new themes, see https://emacsthemes.com.
(Note: I like to set the color theme last because it makes it easy to tell when emacs initialization has successfully completed.)

** Load my favorite themes
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config (load-theme 'nord t))
(use-package zenburn-theme)
#+END_SRC 

** Persist theme selection across sessions
#+BEGIN_SRC emacs-lisp
(use-package remember-last-theme
  :config (remember-last-theme-with-file-enable (expand-file-name "transient/last-theme" user-emacs-directory)))
#+END_SRC 

