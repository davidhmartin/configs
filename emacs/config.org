#+TITLE:  David Martin's emacs configuration
#+AUTHOR: David H Martin
#+OPTIONS: num:nil
* Overview
  GNU Emacs configuration implemented in "literate programming" style using org/babel  
** Usage
   Copy or symlink this file (config.org) to $HOME/.emacs.d. Edit init.el to contain only the following:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "config.org"
                   user-emacs-directory))
#+END_SRC

** Conventions:
  - Use straight for package management
  - use config.org for all configuration
  - Don't use customize

* Setting up package management and load paths
** Disable package.el
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap straight as the package manager
#+BEGIN_SRC emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))
#+END_SRC

** Add .emacs.d/lisp to load path, for unpackaged sources
#+BEGIN_SRC emacs-lisp
   (setq load-path (cons (expand-file-name "~/.emacs.d/lisp") load-path))
#+END_SRC

* Fix the os/x shell path issue
 #+BEGIN_SRC emacs-lisp
   (when (memq window-system '(mac ns x))
     (use-package exec-path-from-shell
       :config (when (memq window-system '(mac ns x))
                 (exec-path-from-shell-initialize))))
#+END_SRC

* Head off potential memory issues caused by LSP
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
(when (boundp 'read-process-output-max)
  ;; New in Emacs 27
  (setq read-process-output-max (* 1024 1024)))
#+END_SRC


* Shell support: vterm
  The ultimate emacs terminal emulator. See https://github.com/akermu/emacs-libvterm
  To run on OS/X, need to install libvterm and cmake via homebrew, as follows:
    brew install libvterm
    brew install cmake
#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC


* Hydra
#+BEGIN_SRC emacs-lisp
(use-package general)
(use-package hydra)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile)
  (projectile-mode +1)
  ;; Recommended keymap prefix on macOS
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

* Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree)
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-window-fixed-size nil)
#+END_SRC

* General editor settings
** Basic settings
 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (column-number-mode 1)
   (global-hl-line-mode 1)
   (global-visual-line-mode nil)
   ;(global-whitespace-mode 1)
   (show-paren-mode 1)
   (setq-default indent-tabs-mode nil)
#+END_SRC
** Persist minibuffer history
#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC

* TO-do file customizations
** Customize the to-do workflow states.
   I distinguish between activites ("TODO") and meetings ("MEETING")
#+BEGIN_SRC emacs-lisp
(setq-default org-todo-keywords
              '((sequence "TODO" "IN-PROGRESS" "|" "DONE" "DEFERRED" "CANCELED")
                (sequence "MEETING" "|" "MTG DONE" "MTG CANCELED")))

#+END_SRC
** Function to open todo file for the current day.
   This hard-codes my (rather primitive) convention: file name is the date, all files are in $HOME/todo.
#+BEGIN_SRC emacs-lisp
(defun open-today-todo-file ()
  "Opens today's org mode todo file. Hard-coned assumptions: todo files are in '$HOME/todo' and follow the pattern 'mmmdd.org', e.g. 'nov07.org'"
  (interactive)
  (let ((today (downcase (format-time-string "%b%d.org"))))
    (switch-to-buffer (find-file-noselect (concat "~/todo/" today)))
    (when (eq 0 (buffer-size))
      (insert "Todo list for " (format-time-string "<%Y-%m-%d %a>\n"))
      (insert "* Work\n")
      (insert "** TODO Email/Slack/Tabs\n")
      (insert "** MEETING Standup\n"))))
#+END_SRC


** Org babel helpers (Primarily for editing this config.org file)
  Add a keyboard macro named "elisp" to insert #+BEGIN_SRC and #+END_SRC.
  I'm using a macro instead of snippets because YASnippets does not play well with org mode and it's not worth the effort to fix unless I get heavily into org mode editing.
#+BEGIN_SRC emacs-lisp
(fset 'elisp
   (kmacro-lambda-form [?\C-a ?# ?+ ?B ?E ?G ?I ?N ?_ ?S ?R ?C ?  ?e ?m ?a ?c ?s ?- ?l ?/ ?i ?s ?p backspace backspace backspace backspace ?i ?s ?p return return ?# ?+ ?E ?N ?D ?_ ?S ?R ?C up] 0 "%d"))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :custom (markdown-command "/usr/local/bin/markdown"))
  (use-package markdown-preview-mode)
#+END_SRC        
  
* Snippets
  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC


** Git support 
 #+BEGIN_SRC emacs-lisp
   (use-package magit)
#+END_SRC

* Programming language support

** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init (setq lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred)
  :bind (:map lsp-mode-map ("C-c C-a" . #'lsp-execute-code-action))
  :custom
  (lsp-file-watch-threshold nil)
  (lsp-solargraph-multi-root nil)
  :config
  ;;;(lsp-enable-which-key-integration t)
  :hook ((go-mode . lsp)
         (typescript-mode . lsp)
         (ruby-mode . lsp)))

(use-package lsp-ui
  :commands lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-prefer-flymake nil)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-alignment 'window))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(use-package company-lsp :commands company-lsp)

(setq
 lsp-ui-doc-enable t
 lsp-ui-peek-enable t
 lsp-ui-sideline-enable t
 lsp-ui-imenu-enable t
 lsp-ui-flycheck-enable t)
#+END_SRC

** DAP
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :commands dap-debug

  :config
  (dap-mode 1)
  (setq dap-print-io t)
  
  (require 'dap-hydra)

  (require 'dap-node)
  (dap-node-setup) ;; automatically installs Node debug adapter if needed

  (require 'dap-dlv-go)
  ;; (defun pt/turn-on-debugger ()
  ;;   (interactive)
  ;;   (dap-mode)
  ;;   (dap-auto-configure-mode)
  ;;   (dap-ui-mode)
  ;;   (dap-ui-controls-mode))
  ;(require 'dap-gdb-lldb)
  ;(dap-gdb-lldb-setup)

  ;; (use-package dap-ui
  ;; :ensure nil
  ;; :config
  ;; (dap-ui-mode 1)) 

  ;; bind C-c l d to dap-hydra for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))
#+END_SRC
   
** Various file edit modes
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
  (use-package json-mode)
  (use-package graphql-mode)
#+END_SRC

** High octane completion
   Enables ivy mode, counsel, and swiper. (See https://github.com/abo-abo/swiper and https://oremacs.com/swiper/)
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :bind (("<C-return>" . ivy-immediate-done)))
    (use-package counsel :config (counsel-mode 1))
    (use-package swiper)
      (use-package flycheck
                       :config (global-flycheck-mode 1))
    (straight-use-package 'company-mode)
#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :hook ((ruby-mode . robe-mode)))

  ;; (use-package ruby-mode
  ;;   :after lsp-mode
  ;;   :hook ((ruby-mode . lsp-deferred)))
  (use-package inf-ruby
    :config
    (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
#+END_SRC

Loading ruby-debug was disabled in my original init.el. I don't remember why. If you start doing ruby dev, try re-enabling this.
#+BEGIN_SRC emacs-lisp :tangle no
       (require 'ruby-debug)
#+END_SRC

** Javascript / Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC

** Go
   Inspirations:
   - https://dr-knz.net/a-tour-of-emacs-as-go-editor.html
   - https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (setq indent-tabs-mode 1)
                              (setq tab-width 4)))
    (defvar gofmt-command '/usr/local/bin/gofmt)
    :hook ((go-mode . lsp-deferred)
           (before-save . lsp-format-buffer)
           (before-save . lsp-organize-imports)))
    ;(add-hook 'go-mode-hook #'lsp)
    ;(add-hook 'before-save-hook 'gofmt-before-save))
#+END_SRC

*** Glyphs
    Disabled until I achieve sufficient go proficiency not to get confused.
#+BEGIN_SRC emacs-lisp :tangle no
   (add-hook
    'go-mode-hook
    (lambda ()
      (push '("error" . ?∇) prettify-symbols-alist)
      (push '("err" . ?⊙) prettify-symbols-alist)
      (push '("exists" . ?∃) prettify-symbols-alist)
      (push '(":= range" . ?∈) prettify-symbols-alist)
      (push '("ok" . ?✓) prettify-symbols-alist)
      (push '("==" . ?≡) prettify-symbols-alist)
      (push '(":=" . ?≔) prettify-symbols-alist)
      (push '(">=" . ?≥) prettify-symbols-alist)
      (push '("<=" . ?≤) prettify-symbols-alist)
      (push '("<-" . ?←) prettify-symbols-alist)
      (push '("!=" . ?≠) prettify-symbols-alist)
      (push '("..." . ?…) prettify-symbols-alist)
      (push '("nil" . ?∅) prettify-symbols-alist)
      (push '("make" . ?&) prettify-symbols-alist)
      (push '("new" . ?&) prettify-symbols-alist)
      (push '("context.Context" . ?◇) prettify-symbols-alist)
      (push '("ctx" . ?⋄) prettify-symbols-alist)
      (push '("mu" . ?❢) prettify-symbols-alist)
      (push '("&&" . ?∧) prettify-symbols-alist)
      (push '("||" . ?∨) prettify-symbols-alist)
      (push '("!" . ?¬) prettify-symbols-alist)
      (push '("interface{}" . ?⋆) prettify-symbols-alist)
      (push '("struct{}" . ?ε) prettify-symbols-alist)
      ))
   (global-prettify-symbols-mode 't)

#+END_SRC

* Custom keyboard shortcuts
  I'm using function key F12 as the prefix for my shortcuts.
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'david-map)
  (global-set-key (kbd "<f12>") 'david-map)
  (define-key david-map (kbd "l") #'counsel-load-theme)
  (define-key david-map (kbd "c") (lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory))))
  (define-key david-map (kbd "t") #'open-today-todo-file)
#+END_SRC


* Themes
  To find new themes, see https://emacsthemes.com.
  (Note: Setting the color theme last makes it easier to notice when emacs init fails due to config errors.)
** Load my favorite themes
#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :config (load-theme 'nord t))
  (use-package zenburn-theme)
#+END_SRC 
** Persist theme selection across sessions
#+BEGIN_SRC emacs-lisp
  (use-package remember-last-theme
  :config (remember-last-theme-with-file-enable (expand-file-name "transient/last-theme" user-emacs-directory)))
#+END_SRC 

